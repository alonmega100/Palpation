import osimport numpy as npimport shutilimport argparsedef split_masked_images(PATH, train_percent=80):    """    Splits masked.png images in PATH into train/ and test/ folders,    moving both the image and its matching JSON file.    Args:        PATH (str): Directory containing the masked.png images and JSON files.        train_percent (int): Percentage of images to move into the train set.    """    # Collect all masked images    masked_files = [f for f in os.listdir(PATH) if f.endswith("masked.png")]    if not masked_files:        print("No masked.png files found in:", PATH)        return    # Shuffle list for randomness    np.random.shuffle(masked_files)    # Compute split index    split_idx = int(len(masked_files) * train_percent / 100)    # Ensure train/test directories exist    train_dir = os.path.join(PATH, "train")    test_dir = os.path.join(PATH, "test")    os.makedirs(train_dir, exist_ok=True)    os.makedirs(test_dir, exist_ok=True)    # Move image + json pairs    for i, img_file in enumerate(masked_files):        # Build base name (strip "_masked.png")        base_name = img_file.replace("_masked.png", "")        json_file = base_name + ".json"        # Source paths        img_src = os.path.join(PATH, img_file)        json_src = os.path.join(PATH, json_file)        # Destination dir        dst_dir = train_dir if i < split_idx else test_dir        # Move image        shutil.move(img_src, os.path.join(dst_dir, img_file))        # Move JSON if it exists        if os.path.exists(json_src):            shutil.move(json_src, os.path.join(dst_dir, json_file))        else:            print(f"Warning: JSON file not found for {img_file}")    print(f"Moved {split_idx} image/json pairs to {train_dir}, "          f"{len(masked_files) - split_idx} pairs to {test_dir}.")if __name__ == "__main__":    parser = argparse.ArgumentParser(description="Split masked.png images into train/test sets with matching JSONs.")    parser.add_argument("path", help="Path to the directory with masked.png images and JSON files")    parser.add_argument("--train_percent", type=int, default=80, help="Percentage of images for training (default: 80)")    args = parser.parse_args()    split_masked_images(args.path, args.train_percent)"""example run:python sort_to_train_test.py ../DATA/grid_capture_20250925_172501 --train_percent 80"""